package recommend

import (
	"breathbathChatGPT/pkg/auth"
	"breathbathChatGPT/pkg/msg"
	"breathbathChatGPT/pkg/utils"
	"context"
	"fmt"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
	"strings"
)

const DeleteFromFavoritesCommand = "/delete_from_favorites"
const DeleteFromFavoritesContextMessage = `–°–æ–æ–±—â–∏ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–º–µ–ª—å–µ WineChefBot. 
–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –µ–º–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–±—Ä–∞—â–∞–π—Å—è –Ω–∞ –≤—ã. –ù–µ –Ω—É–∂–Ω–æ –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è.`
const AlreadyDeletedFromFavoritesContextMessage = `–°–æ–æ–±—â–∏ —á—Ç–æ –≤–∏–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–º–µ–ª—å–µ WineChefBot. 
–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –µ–º–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–±—Ä–∞—â–∞–π—Å—è –Ω–∞ –≤—ã. –ù–µ –Ω—É–∂–Ω–æ –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è.`

var DeleteFromFavoritesFallbackMessages = []string{
	"–†–∞–¥ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤–∏–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–º–µ–ª—å–µ WineChefBot! –¢–µ–ø–µ—Ä—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω —Å—Ç–∞–ª –µ—â—ë –ª—É—á—à–µ –∏ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –∏ –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –≤–∏–Ω–æ–¥–µ–ª–∏—è —Å –Ω–∞–º–∏!",
	"–°–æ–æ–±—â–∞—é, —á—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –≤–∏–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–º–µ–ª—å–µ WineChefBot. –¢–µ–ø–µ—Ä—å –≤–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –≤–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –≤–∏–Ω–æ–º —Å –Ω–∞–º–∏!",
	"–ì–æ—Ç–æ–≤–æ! –í–∞—à –∏–∑–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ WineChefBot üç∑. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É –≤–∏–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è —Å –Ω–æ–≤—ã–º–∏ –≤–∫—É—Å–Ω—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏. –ù–∞—à–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!",
	"–í–∞—à–µ –≤–∏–Ω–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ WineChefBot! üçá –ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–æ –º–µ—Å—Ç–æ —Å–∫–æ—Ä–æ –∑–∞–π–º–µ—Ç –Ω–æ–≤–æ–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∏–Ω–æ. –ü–æ–≥—Ä—É–∂–∞–π—Ç–µ—Å—å –≤ –≤–æ–ª–Ω—É—é—â–∏–π –º–∏—Ä –≤–∏–Ω —Å –Ω–∞–º–∏! üç∑‚ú®",
	"–í–∏–Ω–æ –∏—Å—á–µ–∑–ª–æ –∏–∑ –≤–∞—à–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ WineChefBot! üå† –ú—ã –≤–µ—Ä–∏–º, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –≤–∫—É—Å–æ–≤. –° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö! üç∑üíñ",
}

var DeleteFromFavoritesErrorMessages = []string{
	"–û–π, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –≤–∏–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º ü§î. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑! –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, –º—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. üç∑‚ú®",
	"–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏ –≤–∏–Ω–æ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ WineChefBot üêõ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑–æ–∫? –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! üç∑üöÄ",
	"–£—Ö —Ç—ã, –∫–∞–∂–µ—Ç—Å—è, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ üôà. –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏–º–µ–º –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É. –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã, –º—ã —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! üçáüë®‚Äçüç≥",
	"–û–π-–æ–π, –∫–∞–∂–µ—Ç—Å—è, —É–¥–∞–ª–∏—Ç—å –≤–∏–Ω–æ –Ω–µ –≤—ã—à–ª–æ üç∑. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? –ï—Å–ª–∏ –Ω–µ –ø–æ–π–¥–µ—Ç, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –ø–æ–º–æ–∂–µ–º!",
	"–ù–µ–∞, –≤–∏–Ω–∏—à–∫–æ –≤—Å—ë –µ—â—ë —Å –Ω–∞–º–∏ ü§∑‚Äç‚ôÇÔ∏è. –ï—â–µ —Ä–∞–∑–æ–∫, –∞? –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ, –º—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!",
	"–ê–π, –≤–∏–Ω–æ —É–ø–æ—Ä–Ω–æ –Ω–µ —Ö–æ—á–µ—Ç —É—Ö–æ–¥–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üòÖ. –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞? –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –º—ã –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!",
	"–í–æ—Ç —ç—Ç–æ –Ω–µ–∂–¥–∞–Ω—á–∏–∫, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å üéà. –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏? –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –º—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!",
}

type DeleteFromFavoritesHandler struct {
	db      *gorm.DB
	respGen ResponseGenerator
}

func NewDeleteFromFavoritesHandler(db *gorm.DB, respGen ResponseGenerator) *DeleteFromFavoritesHandler {
	return &DeleteFromFavoritesHandler{
		db:      db,
		respGen: respGen,
	}
}

func (afh *DeleteFromFavoritesHandler) CanHandle(_ context.Context, req *msg.Request) (bool, error) {
	if !utils.MatchesCommand(req.Message, DeleteFromFavoritesCommand) {
		return false, nil
	}

	return true, nil
}

func (afh *DeleteFromFavoritesHandler) handleErrorCase(ctx context.Context) (*msg.Response, error) {
	log := logrus.WithContext(ctx)

	responseMessage := utils.SelectRandomMessage(DeleteFromFavoritesErrorMessages)

	log.Debugf("Selected a random message for delete from favorites failure : %q", responseMessage)

	return &msg.Response{
		Messages: []msg.ResponseMessage{
			{
				Message: responseMessage,
				Type:    msg.Error,
				Options: &msg.Options{},
			},
		},
	}, nil
}

func (afh *DeleteFromFavoritesHandler) handleSuccessCase(
	ctx context.Context,
	req *msg.Request,
	w *Wine,
	alreadyDeleted bool,
) (*msg.Response, error) {
	log := logrus.WithContext(ctx)

	responseFields := []string{}

	sender := req.Sender.String()
	if sender != "" {
		responseFields = append(responseFields, sender)
	}

	if !alreadyDeleted && w.WineTextualSummaryStr() != "" {
		responseFields = append(responseFields, fmt.Sprintf("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–Ω–æ: %s", w.WineTextualSummaryStr()))
	}

	successMsg := DeleteFromFavoritesContextMessage
	if alreadyDeleted {
		successMsg = AlreadyDeletedFromFavoritesContextMessage
	}

	responseMessage, err := afh.respGen.GenerateResponse(
		ctx,
		successMsg,
		strings.Join(responseFields, "."),
		"delete_from_favorites_response",
		req,
	)
	if err != nil {
		log.Errorf("failed to delete from favorites response message: %v", err)
		m := utils.SelectRandomMessage(DeleteFromFavoritesFallbackMessages)
		return &msg.Response{
			Messages: []msg.ResponseMessage{
				{
					Message: m,
					Type:    msg.Success,
					Options: &msg.Options{},
				},
			},
		}, nil
	}

	return &msg.Response{
		Messages: []msg.ResponseMessage{
			{
				Message: responseMessage,
				Type:    msg.Success,
				Options: &msg.Options{},
			},
		},
	}, nil
}

func (afh *DeleteFromFavoritesHandler) Handle(ctx context.Context, req *msg.Request) (*msg.Response, error) {
	log := logrus.WithContext(ctx)
	log.Debugf("Will handle delete from favorites for message %q", req.Message)

	wineArticle := utils.ExtractCommandValue(req.Message, DeleteFromFavoritesCommand)
	usr := auth.GetUserFromReq(req)
	if usr == nil {
		log.Error("Failed to find user data in the current request")
		return afh.handleErrorCase(ctx)
	}

	log.Debugf("Going to find a wine by article %q", wineArticle)
	var wineFromDb Wine
	res := afh.db.Where("article = ?", wineArticle).First(&wineFromDb)
	if err := res.Error; err != nil {
		log.Errorf("failed to find wine by article %q: %v", wineArticle, err)
		return afh.handleErrorCase(ctx)
	}

	log.Debugf("Going to find a favorite wine %d and user %q", wineFromDb.ID, usr.Login)
	var wineFavorite WineFavorite
	res = afh.db.Where("wine_id = ?", wineFromDb.ID).Where("user_login = ?", usr.Login).First(&wineFavorite)

	if res.Error == nil {
		log.Debugf("Found a favorite for wine %d, user %s, id %d", wineFromDb.ID, usr.Login, wineFavorite.ID)
		result := afh.db.Unscoped().Delete(&wineFavorite)
		if err := result.Error; err != nil {
			log.Errorf("failed to delete a wine from favorites %q: %v", wineArticle, err)
			return afh.handleErrorCase(ctx)
		}

		log.Debugf("Deleted a wine favorite %d for wine %d, user %s", wineFavorite.ID, wineFromDb.ID, usr.Login)

		return afh.handleSuccessCase(ctx, req, &wineFromDb, false)
	}

	if !errors.Is(res.Error, gorm.ErrRecordNotFound) {
		log.Errorf("failed to find a wine favorite: %v", res.Error)
		return afh.handleErrorCase(ctx)
	}

	return afh.handleSuccessCase(ctx, req, &wineFromDb, true)
}
