package recommend

import (
	"breathbathChatGPT/pkg/msg"
	"breathbathChatGPT/pkg/utils"
	"context"
	"fmt"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

const ListFavoritesCommand = "/list_favorites"
const WineDescriptionContext = `—Ç—ã —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–Ω –¥–ª—è —Å–∞–π—Ç–∞. –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ –≤—ã–¥–∞–≤–∞–µ–º–æ–º —Ç–µ–∫—Å—Ç–µ. –í—ã–¥–∞–≤–∞–π –≤–Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä, —Ü–≤–µ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ç—Ä–∞–Ω—É, –≥–æ–¥ –≤–∏–Ω–∞. –í—ã–¥–∞–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫—Ä–∞—Å–∏–≤—ã–π, –ø—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –±—ã —ç—Ç–æ –¥–µ–ª–∞–ª —Å–æ–º–µ–ª—å–µ.`

var NoFavoritesFoundMessages = []string{
	"–≠–π, –ø—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω –ø—É—Å—Ç–æ–π. –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —ç—Ç–æ –ª–µ–≥–∫–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! –Ø –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–µ –≤–∏–Ω–∞, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫.",
	"–£—Ö, —É —Ç–µ–±—è —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω –ø—É—Å—Ç–æ–π? –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Å —Ç–∞–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏, –∫–∞–∫ —É –º–µ–Ω—è, —Ç—ã —Ç–æ—á–Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –±–µ–∑ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∏–Ω–∞!",
	"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –∏–∑-–∑–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω! –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ª—à–µ–±–Ω—ã—Ö –±—É—Ç—ã–ª–æ—á–µ–∫. üåüüç∑",
	"–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∏–Ω–∞ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç–æ—Ç—É –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—é! üç∑üîù",
	"–ß–µ–≥–æ —ç—Ç–æ —É —Ç–µ–±—è —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω –ø—É—Å—Ç–æ–π? –ù–µ –±–µ–¥–∞, —è –∑–Ω–∞—é, –∫–∞–∫ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏! üç∑üòâ",
	"–û–ø–∞! –Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤ —Ç–≤–æ—é –≤–∏–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–Ω–∞. –ù–∏—á–µ–≥–æ, –Ω–µ –≤—Å–µ —Ç–∞–∫ –ø–ª–æ—Ö–æ! –Ø –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –≤–∫—É—Å–æ–º –ª—É—á—à–∏—Ö –≤–∏–Ω. –ü–æ–≥–Ω–∞–ª–∏!",
	"–û–π, –∞ —É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ! –ù–µ –±–µ–¥–∞, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º. –î–∞–≤–∞–π —è –ø–æ–¥–∫–∏–Ω—É –µ—â–µ –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é –≤–∏–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä—è–º–∏–∫–æ–º –∏–∑ –º–æ–µ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–≥—Ä–µ–±—É—à–∫–∏",
}

var ReadingFavoritesListErrors = []string{
	"‚ö†Ô∏è–û–π-–æ–π, –∫–∞–∂–µ—Ç—Å—è —è –ø–æ–ø–∞–ª –≤ –Ω–µ–±–æ–ª—å—à—É—é –ø–µ—Ä–µ–¥–µ–ª–∫—É! –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —è –Ω–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É. –ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∏–Ω–æ.",
	"üêç –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–≤–æ–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω. –ò–∑–≤–∏–Ω–∏ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, —è –¥–µ–ª–∞—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É!",
	"‚ò†Ô∏è –û—Ö-–æ—Ö, –ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞ –Ω–µ–±–æ–ª—å—à—É—é –Ω–∞–∫–ª–∞–¥–∫—É! –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–Ω —é–∑–µ—Ä–∞ —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.",
	"üõëE–π, –ø—Ä–æ—Å—Ç–∏, –Ω–æ —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–º–∏–Ω–∫–∞! –Ø –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É –ø—Ä–æ—á–µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ù–∞—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≥–µ–Ω–∏–∏ —É–∂–µ —Ç—Ä—É–¥—è—Ç—Å—è, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –æ—à–∏–±–∫—É. –ù–æ –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤–∏–Ω! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
}

type ListFavoritesHandler struct {
	db      *gorm.DB
	respGen ResponseGenerator
}

func NewListFavoritesHandler(db *gorm.DB, respGen ResponseGenerator) *ListFavoritesHandler {
	return &ListFavoritesHandler{
		db:      db,
		respGen: respGen,
	}
}

func (afh *ListFavoritesHandler) CanHandle(_ context.Context, req *msg.Request) (bool, error) {
	if !utils.MatchesCommand(req.Message, ListFavoritesCommand) {
		return false, nil
	}

	return true, nil
}

func (afh *ListFavoritesHandler) handleErrorCase(ctx context.Context) (*msg.Response, error) {
	log := logrus.WithContext(ctx)

	responseMessage := utils.SelectRandomMessage(ReadingFavoritesListErrors)

	log.Debugf("Selected a random message for add to favorites failure : %q", responseMessage)

	return &msg.Response{
		Messages: []msg.ResponseMessage{
			{
				Message: responseMessage,
				Type:    msg.Error,
				Options: &msg.Options{},
			},
		},
	}, nil
}

func (afh *ListFavoritesHandler) handleListEmpty(ctx context.Context) (*msg.Response, error) {
	log := logrus.WithContext(ctx)

	responseMessage := utils.SelectRandomMessage(NoFavoritesFoundMessages)

	log.Debugf("Selected a random message for add to favorites failure : %q", responseMessage)

	return &msg.Response{
		Messages: []msg.ResponseMessage{
			{
				Message: responseMessage,
				Type:    msg.Success,
				Options: &msg.Options{},
			},
		},
	}, nil
}

func (afh *ListFavoritesHandler) generateWineDescription(
	ctx context.Context,
	req *msg.Request,
	w Wine,
) (string, error) {
	respMessage, err := afh.respGen.GenerateResponse(
		ctx,
		WineDescriptionContext,
		w.WineTextualSummaryStr(),
		"wine_card_favorite",
		req,
	)
	if err != nil {
		return "", err
	}

	if respMessage == "" {
		respMessage = w.String()
	} else {
		respMessage += fmt.Sprintf(" –¶–µ–Ω–∞ %.f —Ä—É–±", w.Price)
	}

	return respMessage, nil
}

func (afh *ListFavoritesHandler) handleSuccessCase(ctx context.Context, req *msg.Request, favWines []WineFavorite) (*msg.Response, error) {
	log := logrus.WithContext(ctx)

	if len(favWines) == 0 {
		return afh.handleListEmpty(ctx)
	}

	resp := msg.Response{
		Messages: []msg.ResponseMessage{
			{
				Message: "üç∑üç∑üç∑üç∑ ----- –ò–ó–ë–†–ê–ù–ù–û–ï ----- üç∑üç∑üç∑üç∑",
				Type:    msg.Success,
				Options: &msg.Options{},
			},
		},
	}

	for _, w := range favWines {
		op := &msg.Options{}
		op.WithPredefinedResponse(msg.PredefinedResponse{
			Text: "‚ùåÔ∏è " + "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
			Type: msg.PredefinedResponseInline,
			Data: DeleteFromFavoritesCommand + " " + w.Wine.Article,
		})
		op.WithPredefinedResponse(msg.PredefinedResponse{
			Text: "‚≠ê " + "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
			Type: msg.PredefinedResponseInline,
			Data: "/list_favorites",
		})

		var media *msg.Media
		if w.Wine.Photo != "" {
			media = &msg.Media{
				Path:            w.Wine.Photo,
				Type:            msg.MediaTypeImage,
				PathType:        msg.MediaPathTypeUrl,
				IsBeforeMessage: true,
			}
		}

		wineDescription, err := afh.generateWineDescription(ctx, req, w.Wine)
		if err != nil {
			log.Errorf("failed to generate wine description: %v", err)
			return afh.handleErrorCase(ctx)
		}

		resp.Messages = append(resp.Messages, msg.ResponseMessage{
			Message: wineDescription,
			Type:    msg.Success,
			Options: op,
			Media:   media,
		})
	}

	return &resp, nil
}

func (afh *ListFavoritesHandler) Handle(ctx context.Context, req *msg.Request) (*msg.Response, error) {
	log := logrus.WithContext(ctx)
	log.Debugf("Will handle list favorites for message %q", req.Message)

	if req.Sender == nil {
		log.Error("Failed to find user data in the current request")
		return afh.handleErrorCase(ctx)
	}

	var wineFavorites []WineFavorite
	res := afh.db.Preload("Wine").Where("user_login = ?", req.Sender.UserName).Find(&wineFavorites)
	if err := res.Error; err != nil {
		log.Errorf("failed to find favorites for user %q: %v", req.Sender.UserName, err)
		return afh.handleErrorCase(ctx)
	}

	log.Debugf("Found %d favorites for user %q", req.Sender.UserName)

	return afh.handleSuccessCase(ctx, req, wineFavorites)
}
